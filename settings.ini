# PARAMETROS GLOBAIS
# Convenção: O primeiro grupo de partículas (part_0) deve ser o de referência (m = epsilon = sigma = 1)
# Os outros parâmetros são adimensionais. Checar anotações.txt T' = T*k_b/epsilon
# Argonio: epsilon/kb = 120K, sigma = 0.341nm 
[global]
    nimpre  = 100 # quntidade de saidas 
    N = 5100  # número de partículas 
    Ntype = 2 # número de tipos de partícula
    t_fim = 10000  # tempo de execução 
    nimpre_init = 0 # começa a simular a partir no tempo referente ao snapshot (nimpre). 
    dt = 0.001 # passo de tempo
    dimX = 20000 # Dimensões da região de cálculo
    dimY = 5000 #
    mesh = 200 40 # 300 60 # malha(elementos)
    rcut = 3 # *sigma
    wall = 'ppee' # condição Elastica ou Periodica nas paredes norte, sul, leste, oeste
    termostato_nose_hoover = .false. #liga termostato Nose Hoover. Este funciona durante toda execução.
    termostato_vel_scaling = .true.  # liga termostato por velocity scaling
    Mc = 1
    Td = -1 #temperatura desejada global constante (-1 = não aplicar) kb = 1.38064852E-23, Td = (2/(3*kb))*E/epsilon(literatura)
    temp_Td = 0 35000 250 # Tempo de velocity scaling [inicial, final, iterações_por_scaling] 
    cold_cells = 1 10 1 40  # [cellx_ini, cellx_fin, celly_ini, celly_fin]
    hot_cells = 190 200 1 40 # [cellx_ini, cellx_fin, celly_ini, celly_fin]
    Td_hot = 2 # temperatura nas cold cells constante. Td_hot = -1 desliga termostato
    Td_cold = 1 # v = sqrt(2*T) temperatura nas hot cells constante. Td_cold = -1 desliga termostato
    force_lingradT = 20 # (NUMERO MULTIPLO DE 4 RECOMENDADO!) se > 0 irá dividir região no numero de subregiões entradas na direação X e será forçado um gradiente de temperatura linear. A região dos banhos será ignorada. A temperatura será controlado por um termostato velocity scaling
    vd = 0 0 # velocidade distribuida com Maxwell Boltzmann = sqrt(Td') 
    NMPT = 1000 # Número máximo de partículas que poderá mudar de process. Se não souber estimar, usar -1 ou o valor de N.
    GField = 0 0 # Campo de força gravitacional que afeta todas as partículas
    print_TC = .false. # imprimir dados para calcular coeficiente de transporte
# PARTICLE PROPERTIES
# v é velocidade global, entrar dois número correspondentes ao vetor vx vy que serão aplicadas em todas as partículas
# se v_file é dada, então ela será usada para dar a velocidade às partículas. Deve ser arquivo .csv. Deixar "%%" se não usar. 
# se ismolecule = .true. então a partícula é levada em conta no termostato 
[par_0]
    x = 'moleculas_sc.csv' 
    v = 0 0 # velocidade global
    v_file = 'v_file_0.csv' # velocidade de cada partícula
    m = 1
    nome = 'g1'
    sigma = 1 # Lennard Jones
    epsilon = 1 # Lennard Jones
    quantidade = 5000
    x_lockdelay = 0 # só vai poder mudar de posição a partir de t = x_lockdelay
    rs = 0 # raio sólido. Posição de partículas na superfície de um sólido de raio rs
    fric_term = 0 # fricção artifical não funciona quando o termostato nose hoover está ligado
    ismolecule = .true.			
[par_1]
    x = 'particulas_sc.csv' 
    v = 0 0 # velocidade global
    v_file = '%%v_file_0.csv' # velocidade de cada partícula
    m = 100
    nome = 'g2'
    sigma = 0.94 # Lennard Jones
    epsilon = 0.428 # Lennard Jones
    quantidade = 100
    x_lockdelay = 1000 # só vai poder mudar de posição a partir de t = x_lockdelay
    rs = 10 # raio sólido. Posição de partículas na superfície de um sólido de raio rs
    fric_term = 0 # fricção artifical	
    ismolecule = .false.						
#[par_2]
#    x = 'p_g.csv'
#    v = 0 0
#    v_file = "%vp_g.csv"
#    m = 20
#    nome = 'g3'
#    sigma = 1 # Lennard Jones
#    epsilon = 1 # Lennard Jones
#    quantidade = 20
#    x_lockdelay = 300 # só vai poder mudar de posição a partir de t = x_lockdelay
#    rs = 5
#    fric_term = 0 # fricção artifical		
